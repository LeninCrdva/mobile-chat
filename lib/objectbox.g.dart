// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/model/chat.dart';
import 'src/model/chat_info.dart';
import 'src/model/message.dart';
import 'src/model/user.dart';
import 'src/storage/token.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 784246622544431292),
      name: 'Chat',
      lastPropertyId: const obx_int.IdUid(5, 7588028880936374263),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7349096665710263844),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 7588028880936374263),
            name: 'infoId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 7966445149648339808),
            relationTarget: 'ChatInfo')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'messages', srcEntity: 'Message', srcField: 'chat')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 304425749333024579),
      name: 'Token',
      lastPropertyId: const obx_int.IdUid(3, 7991771280308769205),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 4630125122897521560),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4411605320126066052),
            name: 'accessToken',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7991771280308769205),
            name: 'refreshToken',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 376550903010958873),
      name: 'User',
      lastPropertyId: const obx_int.IdUid(3, 581160019448596681),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7747518244042403085),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3973664558496155739),
            name: 'username',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 581160019448596681),
            name: 'imageUrl',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 4588652592590523392),
      name: 'ChatInfo',
      lastPropertyId: const obx_int.IdUid(4, 6724570860107424304),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8044139851474752200),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 430878397596184066),
            name: 'sender',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 564891112464107856),
            name: 'receiver',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6724570860107424304),
            name: 'receiverAvatar',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4916786417188433464),
      name: 'Message',
      lastPropertyId: const obx_int.IdUid(10, 3830776520096902627),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8157620515229986322),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2020491500273739034),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5482905689475526902),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5652366373037772317),
            name: 'senderUsername',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 9198969498966259121),
            name: 'receiver',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 624229868091970332),
            name: 'seenAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 2844039200529605121),
            name: 'sendAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 1250507922245368023),
            name: 'receivedAt',
            type: 12,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 3830776520096902627),
            name: 'chatId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 2403779873860159016),
            relationTarget: 'Chat')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 4916786417188433464),
      lastIndexId: const obx_int.IdUid(4, 2403779873860159016),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [4664804561112100780, 90355671778055508],
      retiredPropertyUids: const [
        1403896824443474724,
        4723852935797135281,
        6208529792835083273,
        7814312279097011037
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Chat: obx_int.EntityDefinition<Chat>(
        model: _entities[0],
        toOneRelations: (Chat object) => [object.info],
        toManyRelations: (Chat object) => {
              obx_int.RelInfo<Message>.toOneBacklink(
                      10, object.id, (Message srcObject) => srcObject.chat):
                  object.messages
            },
        getId: (Chat object) => object.id,
        setId: (Chat object, int id) {
          object.id = id;
        },
        objectToFB: (Chat object, fb.Builder fbb) {
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addInt64(4, object.info.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = Chat(id: idParam);
          object.info.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.info.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<Chat>(
              object.messages,
              store,
              obx_int.RelInfo<Message>.toOneBacklink(
                  10, object.id, (Message srcObject) => srcObject.chat));
          return object;
        }),
    Token: obx_int.EntityDefinition<Token>(
        model: _entities[1],
        toOneRelations: (Token object) => [],
        toManyRelations: (Token object) => {},
        getId: (Token object) => object.id,
        setId: (Token object, int id) {
          object.id = id;
        },
        objectToFB: (Token object, fb.Builder fbb) {
          final accessTokenOffset = fbb.writeString(object.accessToken);
          final refreshTokenOffset = fbb.writeString(object.refreshToken);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, accessTokenOffset);
          fbb.addOffset(2, refreshTokenOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final accessTokenParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
          final refreshTokenParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, '');
          final object = Token(
              accessToken: accessTokenParam, refreshToken: refreshTokenParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    User: obx_int.EntityDefinition<User>(
        model: _entities[2],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final usernameOffset = fbb.writeString(object.username);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, usernameOffset);
          fbb.addOffset(2, imageUrlOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final usernameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final imageUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = User(
              id: idParam, username: usernameParam, imageUrl: imageUrlParam);

          return object;
        }),
    ChatInfo: obx_int.EntityDefinition<ChatInfo>(
        model: _entities[3],
        toOneRelations: (ChatInfo object) => [],
        toManyRelations: (ChatInfo object) => {},
        getId: (ChatInfo object) => object.id,
        setId: (ChatInfo object, int id) {
          object.id = id;
        },
        objectToFB: (ChatInfo object, fb.Builder fbb) {
          final senderOffset = fbb.writeString(object.sender);
          final receiverOffset = fbb.writeString(object.receiver);
          final receiverAvatarOffset = fbb.writeString(object.receiverAvatar);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, senderOffset);
          fbb.addOffset(2, receiverOffset);
          fbb.addOffset(3, receiverAvatarOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final senderParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final receiverParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final receiverAvatarParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = ChatInfo(
              sender: senderParam,
              receiver: receiverParam,
              receiverAvatar: receiverAvatarParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    Message: obx_int.EntityDefinition<Message>(
        model: _entities[4],
        toOneRelations: (Message object) => [object.chat],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.id,
        setId: (Message object, int id) {
          object.id = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          final typeOffset = fbb.writeString(object.type);
          final senderUsernameOffset = fbb.writeString(object.senderUsername);
          final receiverOffset = fbb.writeString(object.receiver);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, contentOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, senderUsernameOffset);
          fbb.addOffset(4, receiverOffset);
          fbb.addInt64(
              5,
              object.seenAt == null
                  ? null
                  : object.seenAt!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(6, object.sendAt.microsecondsSinceEpoch * 1000);
          fbb.addInt64(
              7,
              object.receivedAt == null
                  ? null
                  : object.receivedAt!.microsecondsSinceEpoch * 1000);
          fbb.addInt64(9, object.chat.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final seenAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final receivedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final senderUsernameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final receiverParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final sendAtParam = DateTime.fromMicrosecondsSinceEpoch(
              (const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0) /
                      1000)
                  .round());
          final seenAtParam = seenAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (seenAtValue / 1000).round());
          final receivedAtParam = receivedAtValue == null
              ? null
              : DateTime.fromMicrosecondsSinceEpoch(
                  (receivedAtValue / 1000).round());
          final object = Message(
              id: idParam,
              content: contentParam,
              type: typeParam,
              senderUsername: senderUsernameParam,
              receiver: receiverParam,
              sendAt: sendAtParam,
              seenAt: seenAtParam,
              receivedAt: receivedAtParam);
          object.chat.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          object.chat.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Chat] entity fields to define ObjectBox queries.
class Chat_ {
  /// See [Chat.id].
  static final id = obx.QueryIntegerProperty<Chat>(_entities[0].properties[0]);

  /// See [Chat.info].
  static final info =
      obx.QueryRelationToOne<Chat, ChatInfo>(_entities[0].properties[1]);

  /// see [Chat.messages]
  static final messages = obx.QueryBacklinkToMany<Message, Chat>(Message_.chat);
}

/// [Token] entity fields to define ObjectBox queries.
class Token_ {
  /// See [Token.id].
  static final id = obx.QueryIntegerProperty<Token>(_entities[1].properties[0]);

  /// See [Token.accessToken].
  static final accessToken =
      obx.QueryStringProperty<Token>(_entities[1].properties[1]);

  /// See [Token.refreshToken].
  static final refreshToken =
      obx.QueryStringProperty<Token>(_entities[1].properties[2]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[2].properties[0]);

  /// See [User.username].
  static final username =
      obx.QueryStringProperty<User>(_entities[2].properties[1]);

  /// See [User.imageUrl].
  static final imageUrl =
      obx.QueryStringProperty<User>(_entities[2].properties[2]);
}

/// [ChatInfo] entity fields to define ObjectBox queries.
class ChatInfo_ {
  /// See [ChatInfo.id].
  static final id =
      obx.QueryIntegerProperty<ChatInfo>(_entities[3].properties[0]);

  /// See [ChatInfo.sender].
  static final sender =
      obx.QueryStringProperty<ChatInfo>(_entities[3].properties[1]);

  /// See [ChatInfo.receiver].
  static final receiver =
      obx.QueryStringProperty<ChatInfo>(_entities[3].properties[2]);

  /// See [ChatInfo.receiverAvatar].
  static final receiverAvatar =
      obx.QueryStringProperty<ChatInfo>(_entities[3].properties[3]);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// See [Message.id].
  static final id =
      obx.QueryIntegerProperty<Message>(_entities[4].properties[0]);

  /// See [Message.content].
  static final content =
      obx.QueryStringProperty<Message>(_entities[4].properties[1]);

  /// See [Message.type].
  static final type =
      obx.QueryStringProperty<Message>(_entities[4].properties[2]);

  /// See [Message.senderUsername].
  static final senderUsername =
      obx.QueryStringProperty<Message>(_entities[4].properties[3]);

  /// See [Message.receiver].
  static final receiver =
      obx.QueryStringProperty<Message>(_entities[4].properties[4]);

  /// See [Message.seenAt].
  static final seenAt =
      obx.QueryDateNanoProperty<Message>(_entities[4].properties[5]);

  /// See [Message.sendAt].
  static final sendAt =
      obx.QueryDateNanoProperty<Message>(_entities[4].properties[6]);

  /// See [Message.receivedAt].
  static final receivedAt =
      obx.QueryDateNanoProperty<Message>(_entities[4].properties[7]);

  /// See [Message.chat].
  static final chat =
      obx.QueryRelationToOne<Message, Chat>(_entities[4].properties[8]);
}
